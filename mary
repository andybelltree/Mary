#!/usr/bin/env python

from util import *
from lisp.interpreter import Interpreter
from os.path import dirname, join
import sys
import argparse


parser = argparse.ArgumentParser()
parser.add_argument('-v', help='get verbose debug output', action='store_true', default=False)
parser.add_argument('-m', help='get macroexpansion output', action='store_true', default=False)
parser.add_argument('-c', help='clear environment. Don\'t read in stdlib first', action='store_true', default=False)
parser.add_argument('-e', help='get verbose error reporting', action='store_true', default=False)
parser.add_argument('-r', help='set recursion depth of python', type=int, default=1000)
parser.add_argument('-d', help='get evaluation history', action='store_true', default=False)
parser.add_argument('-f', help='file to interpret')

args = parser.parse_args()
sys.setrecursionlimit(args.r)

interpr = Interpreter(args.v, args.m, args.d)
if not args.c:
    interpret_file(join(dirname(__file__), "stdlib.lisp"), interpr)
if not args.f:
    repl(interpr, args.e)
else:
    print(interpret_file(args.f, interpr))
